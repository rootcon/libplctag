name: libplctag CI

on:
  push:
    branches: [ release, prerelease ]
  pull_request:
    branches: [ release, prerelease ]

jobs:

  ubuntu_x64:

    runs-on: ubuntu-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_ubuntu_x64"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Set up build environment
      run: sudo apt update; sudo apt install build-essential cmake libmodbus5 libmodbus-dev

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_MODBUS_EMULATOR:BOOL=On -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50 &
        sleep 2
        echo "test simple get/set tag."
        ${{ env.DIST }}/simple
        echo "test callback use."
        ${{ env.DIST }}/test_callback
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Micro800 '--tag=TestDINTArray:DINT[10]' --debug &
        sleep 2
        echo "test getting a tag on a Micro800."
        ${{ env.DIST }}/tag_rw2 --type=sint32  '--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Omron '--tag=TestDINTArray:DINT[10]' --debug  &
        sleep 2
        echo "test getting a tag on an Omron NJ/NX."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=PLC/5 --tag=N7[10] --debug  &
        sleep 2
        echo "test getting a tag on a PLC/5."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=SLC500 --tag=N7[10] --debug &
        sleep 2
        echo "test getting a tag on a SLC 500."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug &
        sleep 2
        echo "test getting a tag with connection failures."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] &
        sleep 2
        echo "test getting a large tag."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 "--tag=TestBigArray:DINT[2000]" "--tag=Test_Array_1:DINT[1000]" "--tag=Test_Array_2x3:DINT[2,3]" "--tag=Test_Array_2x3x4:DINT[2,3,4]" &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_indexed_tags
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Modbus
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/modbus_server &
        sleep 2
        echo "test Modbus callbacks and read/write"
        ${{ env.DIST }}/test_callback_ex_modbus
        echo "shut down server."
        killall modbus_server -TERM &> /dev/null

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  ubuntu_x86:

    runs-on: ubuntu-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_ubuntu_x86"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Set up build environment
      run: sudo apt update; sudo apt-get -y --force-yes install gcc-multilib g++-multilib

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_32_BIT=1 -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50 &
        sleep 2
        echo "test simple get/set tag."
        ${{ env.DIST }}/simple
        echo "test callback use."
        ${{ env.DIST }}/test_callback
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug &
        sleep 2
        echo "test getting a tag on a Micro800."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Omron --tag=TestDINTArray:DINT[10] --debug &
        sleep 2
        echo "test getting a tag on an Omron NJ/NX."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=PLC/5 --tag=N7[10] &
        sleep 2
        echo "test getting a tag on a PLC/5."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=SLC500 --tag=N7[10] &
        sleep 2
        echo "test getting a tag on a SLC 500."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 &
        sleep 2
        echo "test getting a tag with connection failures."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] &
        sleep 2
        echo "test getting a large tag."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5] &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_array_notation 127.0.0.1 1,0 TestBigArray 5 2000
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5] &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_array_notation 127.0.0.1 1,0 TestBigArray 5 2000
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  macos_x64:

    runs-on: macos-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_macos_x64"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50 &
        sleep 2
        echo "test simple get/set tag."
        ${{ env.DIST }}/simple
        echo "test callback use."
        ${{ env.DIST }}/test_callback
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=Micro800 --tag=TestDINTArray:DINT[10] &
        sleep 2
        echo "test getting a tag on a Micro800."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Omron --tag=TestDINTArray:DINT[10] --debug &
        sleep 2
        echo "test getting a tag on an Omron NJ/NX."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=PLC/5 --tag=N7[10] --debug &
        sleep 2
        echo "test getting a tag on a PLC/5."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=SLC500 --tag=N7[10] --debug &
        sleep 2
        echo "test getting a tag on a SLC 500."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug &
        sleep 2
        echo "test getting a tag with connection failures."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] &
        sleep 2
        echo "test getting a large tag."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5] &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_array_notation 127.0.0.1 1,0 TestBigArray 5 2000
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5] &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_array_notation 127.0.0.1 1,0 TestBigArray 5 2000
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  macos_ARM64:

    runs-on: macos-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_macos_aarch64"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  windows_x64_MSVC:

    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_x64"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Setup MSVC for x86-64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=AMD64 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator."
        start /b .\ab_server.exe --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50
        echo "waiting for simulator to start up..."
        timeout /T 5
        echo "test simple get/set tag."
        .\simple
        echo "test callback use."
        .\test_callback
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on a Micro800."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Omron --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on an Omron NJ/NX."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=PLC/5 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a PLC/5."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=SLC500 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a SLC 500."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        dir
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug
        timeout /T 5
        echo "test getting a tag with connection failures."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000]
        timeout /T 5
        echo "test getting a large tag."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5]
        timeout /T 5
        echo "test array notation read/write"
        .\test_array_notation.exe 127.0.0.1 1,0 TestBigArray 5 2000
        set test_result=%errorlevel%
        echo "shut down server."
        taskkill /F /IM ab_server.exe
        exit /b %test_result%
      shell: cmd

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}


  windows_x64_MinGW:

    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_x64_MinGW"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=AMD64 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator."
        start /b .\ab_server.exe --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50
        echo "waiting for simulator to start up..."
        timeout /T 5
        echo "test simple get/set tag."
        .\simple
        echo "test callback use."
        .\test_callback
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on a Micro800."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Omron --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on an Omron NJ/NX."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=PLC/5 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a PLC/5."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=SLC500 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a SLC 500."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        dir
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug
        timeout /T 5
        echo "test getting a tag with connection failures."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000]
        timeout /T 5
        echo "test getting a large tag."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5]
        timeout /T 5
        echo "test array notation read/write"
        .\test_array_notation.exe 127.0.0.1 1,0 TestBigArray 5 2000
        set test_result=%errorlevel%
        echo "shut down server."
        taskkill /F /IM ab_server.exe
        exit /b %test_result%
      shell: cmd



  windows_x86_MSVC:

    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_x86_MSVC"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Setup MSVC for x86
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: win32

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=Win32 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50
        timeout /T 5
        echo "test simple get/set tag."
        .\simple
        echo "test callback use."
        .\test_callback
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on a Micro800."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Omron --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on an Omron NJ/NX."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=PLC/5 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a PLC/5."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=SLC500 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a SLC 500."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        dir
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug
        timeout /T 5
        echo "test getting a tag with connection failures."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000]
        timeout /T 5
        echo "test getting a large tag."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5]
        timeout /T 5
        echo "test array notation read/write"
        .\test_array_notation.exe 127.0.0.1 1,0 TestBigArray 5 2000
        set test_result=%errorlevel%
        echo "shut down server."
        taskkill /F /IM ab_server.exe
        exit /b %test_result%
      shell: cmd

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}


  windows_x86_MinGW:

    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_x64_MinGW"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator."
        start /b .\ab_server.exe --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50
        echo "waiting for simulator to start up..."
        timeout /T 5
        echo "test simple get/set tag."
        .\simple
        echo "test callback use."
        .\test_callback
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on a Micro800."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Omron --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on an Omron NJ/NX."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=PLC/5 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a PLC/5."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=SLC500 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a SLC 500."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        dir
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug
        timeout /T 5
        echo "test getting a tag with connection failures."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000]
        timeout /T 5
        echo "test getting a large tag."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5]
        timeout /T 5
        echo "test array notation read/write"
        .\test_array_notation.exe 127.0.0.1 1,0 TestBigArray 5 2000
        set test_result=%errorlevel%
        echo "shut down server."
        taskkill /F /IM ab_server.exe
        exit /b %test_result%
      shell: cmd


  windows_cross_build_ARM64_MSVC:
    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_arm64"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: Checkout library source.
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Setup MSVC for ARM64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_arm64

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=ARM64 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }} && cmake --build . --verbose --config MinSizeRel

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}


  windows_cross_build_ARM32_MSVC:
    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_ARM32_MSVC"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: Checkout library source.
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Install MSVC ARM32 compiler
      run: |
        curl -LO https://aka.ms/vs/17/release/vs_buildtools.exe
        .\vs_buildtools.exe modify --quiet --wait --norestart --nocache --installPath C:\BuildTools --add Microsoft.VisualStudio.Workload.VCTools --add Microsoft.VisualStudio.Component.VC.Tools.ARM --add Microsoft.VisualStudio.Component.Windows10SDK.19041

    - name: Clone and bootstrap vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg
        .\vcpkg\bootstrap-vcpkg.bat

    - name: Configure and Build libplctag
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake -DVCPKG_TARGET_TRIPLET=arm-windows -DCMAKE_BUILD_TYPE=MinSizeRel
        cmake --build . --config MinSizeRel

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}


  ubuntu_cross_build_arm6:
    runs-on: ubuntu-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_linux_arm6hf"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Set up build environment
      run: sudo apt update; sudo apt install build-essential cmake crossbuild-essential-armhf

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_32_BIT=0 -DCROSS_BUILD_TYPE=Linux-Arm6 -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}


  ubuntu_cross_build_arm7:

    runs-on: ubuntu-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_linux_arm7l"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Set up build environment
      run: sudo apt update; sudo apt install build-essential cmake crossbuild-essential-armhf

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_32_BIT=0 -DCROSS_BUILD_TYPE=Linux-Arm7 -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}


  ubuntu_cross_build_aarch64:

    runs-on: ubuntu-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_linux_aarch64"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Set up build environment
      run: sudo apt update; sudo apt install build-essential cmake crossbuild-essential-arm64

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_32_BIT=0 -DCROSS_BUILD_TYPE=Linux-Aarch64 -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Upload ZIP artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}
