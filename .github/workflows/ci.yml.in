name: libplctag CI

on:
  push:
    branches: [ release, prerelease ]
  pull_request:
    branches: [ release, prerelease ]

jobs:

  ubuntu_x64:

    runs-on: ubuntu-22.04

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_ubuntu_x64"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Set up build environment
      run: sudo apt update; sudo apt install build-essential cmake libmodbus5 libmodbus-dev

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_MODBUS_EMULATOR:BOOL=On -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50 &
        sleep 2
        echo "test simple get/set tag."
        ${{ env.DIST }}/simple
        echo "test callback use."
        ${{ env.DIST }}/test_callback
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Micro800 '--tag=TestDINTArray:DINT[10]' --debug &
        sleep 2
        echo "test getting a tag on a Micro800."
        ${{ env.DIST }}/tag_rw2 --type=sint32  '--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Omron '--tag=TestDINTArray:DINT[10]' --debug  &
        sleep 2
        echo "test getting a tag on an Omron NJ/NX."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=PLC/5 --tag=N7[10] --debug  &
        sleep 2
        echo "test getting a tag on a PLC/5."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=SLC500 --tag=N7[10] --debug &
        sleep 2
        echo "test getting a tag on a SLC 500."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug &
        sleep 2
        echo "test getting a tag with connection failures."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] &
        sleep 2
        echo "test getting a large tag."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 "--tag=TestBigArray:DINT[2000]" "--tag=Test_Array_1:DINT[1000]" "--tag=Test_Array_2x3:DINT[2,3]" "--tag=Test_Array_2x3x4:DINT[2,3,4]" &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_indexed_tags
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Reconnect After Outage
      run: |
        cd ${{ env.DIST }}
        echo "Test reconnect after outage"
        ${{ env.DIST }}/test_reconnect_after_outage ./ab_server

    - name: Test Modbus
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/modbus_server &
        sleep 2
        echo "test Modbus callbacks and read/write"
        ${{ env.DIST }}/test_callback_ex_modbus
        echo "shut down server."
        killall modbus_server -TERM &> /dev/null

    - name: Upload ZIP artifact with only development libs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_dev
        path: ${{ env.DIST }}/libplctag.*

    - name: Upload ZIP artifact with libs and tools
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_tools
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/ab_server
          ${{ env.DIST }}/list_tags_logix
          ${{ env.DIST }}/list_tags_micro8x0

    - name: Upload ZIP artifact with all binaries
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  ubuntu_x86:

    runs-on: ubuntu-22.04

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_ubuntu_x86"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Set up build environment
      run: sudo apt update; sudo apt-get -y --force-yes install gcc-multilib g++-multilib

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_32_BIT=1 -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50 &
        sleep 2
        echo "test simple get/set tag."
        ${{ env.DIST }}/simple
        echo "test callback use."
        ${{ env.DIST }}/test_callback
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug &
        sleep 2
        echo "test getting a tag on a Micro800."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Omron --tag=TestDINTArray:DINT[10] --debug &
        sleep 2
        echo "test getting a tag on an Omron NJ/NX."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=PLC/5 --tag=N7[10] &
        sleep 2
        echo "test getting a tag on a PLC/5."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=SLC500 --tag=N7[10] &
        sleep 2
        echo "test getting a tag on a SLC 500."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 &
        sleep 2
        echo "test getting a tag with connection failures."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] &
        sleep 2
        echo "test getting a large tag."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5] &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_array_notation 127.0.0.1 1,0 TestBigArray 5 2000
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Reconnect After Outage
      run: |
        cd ${{ env.DIST }}
        echo "Test reconnect after outage"
        ${{ env.DIST }}/test_reconnect_after_outage ./ab_server

    - name: Upload ZIP artifact with only development libs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_dev
        path: ${{ env.DIST }}/libplctag.*

    - name: Upload ZIP artifact with libs and tools
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_tools
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/ab_server
          ${{ env.DIST }}/list_tags_logix
          ${{ env.DIST }}/list_tags_micro8x0

    - name: Upload ZIP all binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  macos_x64:

    runs-on: macos-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_macos_x64"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50 &
        sleep 2
        echo "test simple get/set tag."
        ${{ env.DIST }}/simple
        echo "test callback use."
        ${{ env.DIST }}/test_callback
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=Micro800 --tag=TestDINTArray:DINT[10] &
        sleep 2
        echo "test getting a tag on a Micro800."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Omron --tag=TestDINTArray:DINT[10] --debug &
        sleep 2
        echo "test getting a tag on an Omron NJ/NX."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=PLC/5 --tag=N7[10] --debug &
        sleep 2
        echo "test getting a tag on a PLC/5."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=SLC500 --tag=N7[10] --debug &
        sleep 2
        echo "test getting a tag on a SLC 500."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug &
        sleep 2
        echo "test getting a tag with connection failures."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] &
        sleep 2
        echo "test getting a large tag."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5] &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_array_notation 127.0.0.1 1,0 TestBigArray 5 2000
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Reconnect After Outage
      run: |
        cd ${{ env.DIST }}
        echo "Test reconnect after outage"
        ${{ env.DIST }}/test_reconnect_after_outage ./ab_server

    - name: Upload ZIP artifact with only development libs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_dev
        path: ${{ env.DIST }}/libplctag.*

    - name: Upload ZIP artifact with libs and tools
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_tools
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/ab_server
          ${{ env.DIST }}/list_tags_logix
          ${{ env.DIST }}/list_tags_micro8x0

    - name: Upload ZIP all binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  macos_ARM64:

    runs-on: macos-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_macos_aarch64"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_VERBOSE_MAKEFILE=On ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Upload ZIP artifact with only development libs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_dev
        path: ${{ env.DIST }}/libplctag.*

    - name: Upload ZIP artifact with libs and tools
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_tools
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/ab_server
          ${{ env.DIST }}/list_tags_logix
          ${{ env.DIST }}/list_tags_micro8x0

    - name: Upload ZIP all binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  windows_x64_MSVC:

    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_x64"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Setup MSVC for x86-64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=AMD64 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator."
        start /b .\ab_server.exe --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50
        echo "waiting for simulator to start up..."
        timeout /T 5
        echo "test simple get/set tag."
        .\simple
        echo "test callback use."
        .\test_callback
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on a Micro800."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Omron --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on an Omron NJ/NX."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=PLC/5 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a PLC/5."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=SLC500 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a SLC 500."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        dir
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug
        timeout /T 5
        echo "test getting a tag with connection failures."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000]
        timeout /T 5
        echo "test getting a large tag."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5]
        timeout /T 5
        echo "test array notation read/write"
        .\test_array_notation.exe 127.0.0.1 1,0 TestBigArray 5 2000
        set test_result=%errorlevel%
        echo "shut down server."
        taskkill /F /IM ab_server.exe
        exit /b %test_result%
      shell: cmd

    - name: Test Reconnect After Outage
      run: |
        cd ${{ env.DIST }}
        echo "Test reconnect after outage."
        .\test_reconnect_after_outage .\ab_server.exe
      shell: cmd

    - name: Upload ZIP artifact with only development libs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_dev
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/plctag.*

    - name: Upload ZIP artifact with libs and tools
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_tools
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/plctag.*
          ${{ env.DIST }}/ab_server.exe
          ${{ env.DIST }}/list_tags_logix.exe
          ${{ env.DIST }}/list_tags_micro8x0.exe

    - name: Upload ZIP all binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  windows_x64_MinGW:

    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_x64_MinGW"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=AMD64 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator."
        start /b .\ab_server.exe --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50
        echo "waiting for simulator to start up..."
        timeout /T 5
        echo "test simple get/set tag."
        .\simple
        echo "test callback use."
        .\test_callback
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on a Micro800."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Omron --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on an Omron NJ/NX."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=PLC/5 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a PLC/5."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=SLC500 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a SLC 500."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        dir
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug
        timeout /T 5
        echo "test getting a tag with connection failures."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000]
        timeout /T 5
        echo "test getting a large tag."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5]
        timeout /T 5
        echo "test array notation read/write"
        .\test_array_notation.exe 127.0.0.1 1,0 TestBigArray 5 2000
        set test_result=%errorlevel%
        echo "shut down server."
        taskkill /F /IM ab_server.exe
        exit /b %test_result%
      shell: cmd

  windows_x86_MSVC:

    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_x86"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Setup MSVC for x86
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: win32

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=Win32 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50
        timeout /T 5
        echo "test simple get/set tag."
        .\simple
        echo "test callback use."
        .\test_callback
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on a Micro800."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Omron --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on an Omron NJ/NX."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=PLC/5 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a PLC/5."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=SLC500 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a SLC 500."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        dir
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug
        timeout /T 5
        echo "test getting a tag with connection failures."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000]
        timeout /T 5
        echo "test getting a large tag."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5]
        timeout /T 5
        echo "test array notation read/write"
        .\test_array_notation.exe 127.0.0.1 1,0 TestBigArray 5 2000
        set test_result=%errorlevel%
        echo "shut down server."
        taskkill /F /IM ab_server.exe
        exit /b %test_result%
      shell: cmd

    - name: Upload ZIP artifact with only development libs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_dev
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/plctag.*

    - name: Upload ZIP artifact with libs and tools
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_tools
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/plctag.*
          ${{ env.DIST }}/ab_server.exe
          ${{ env.DIST }}/list_tags_logix.exe
          ${{ env.DIST }}/list_tags_micro8x0.exe

    - name: Upload ZIP all binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  windows_x86_MinGW:

    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_x86_MinGW"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=x86 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose --config MinSizeRel

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator."
        start /b .\ab_server.exe --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50
        echo "waiting for simulator to start up..."
        timeout /T 5
        echo "test simple get/set tag."
        .\simple
        echo "test callback use."
        .\test_callback
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Micro800 --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on a Micro800."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=Omron --tag=TestDINTArray:DINT[10] --debug
        timeout /T 5
        echo "test getting a tag on an Omron NJ/NX."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=PLC/5 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a PLC/5."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=SLC500 --tag=N7[10] --debug
        timeout /T 5
        echo "test getting a tag on a SLC 500."
        .\tag_rw2.exe --type=sint16 "--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        dir
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug
        timeout /T 5
        echo "test getting a tag with connection failures."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000]
        timeout /T 5
        echo "test getting a large tag."
        .\tag_rw2.exe --type=sint32 "--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray" --debug=2
        echo "shut down server."
        taskkill /F /IM ab_server.exe
      shell: cmd

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        start /b .\ab_server.exe --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[5]
        timeout /T 5
        echo "test array notation read/write"
        .\test_array_notation.exe 127.0.0.1 1,0 TestBigArray 5 2000
        set test_result=%errorlevel%
        echo "shut down server."
        taskkill /F /IM ab_server.exe
        exit /b %test_result%
      shell: cmd

  windows_cross_build_ARM64_MSVC:
    runs-on: windows-latest

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_windows_arm64"
      BUILD: "${{ github.workspace }}\\build"
      DIST: "${{ github.workspace }}\\build\\bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch
      run: echo "Building branch ${{ env.BRANCH }}"

    - name: Checkout library source.
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Create build directory
      run: mkdir ${{ env.BUILD }}

    - name: Setup MSVC for ARM64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64_arm64

    - name: Configure CMake
      run: cd ${{ env.BUILD }} && cmake .. -G "Ninja" -DCMAKE_BUILD_TYPE=MinSizeRel -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_SYSTEM_PROCESSOR=ARM64 -DCMAKE_VERBOSE_MAKEFILE=On

    - name: Build
      run: cd ${{ env.BUILD }} && cmake --build . --verbose --config MinSizeRel

    - name: Upload ZIP artifact with only development libs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_dev
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/plctag.*

    - name: Upload ZIP artifact with libs and tools
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_tools
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/plctag.*
          ${{ env.DIST }}/ab_server.exe
          ${{ env.DIST }}/list_tags_logix.exe
          ${{ env.DIST }}/list_tags_micro8x0.exe

    - name: Upload ZIP all binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}

  ubuntu_arm_cross:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        include:
          - arch: armv6
            gcc_prefix: arm-linux-gnueabi
            cmake_toolchain_file: armv6.cmake
            artifact_suffix: armv6
            target_arch: armhf
          - arch: armv7hf
            gcc_prefix: arm-linux-gnueabihf
            cmake_toolchain_file: armv7hf.cmake
            artifact_suffix: armv7_hf
            target_arch: armhf
          - arch: aarch64
            gcc_prefix: aarch64-linux-gnu
            cmake_toolchain_file: aarch64.cmake
            artifact_suffix: arm64
            target_arch: arm64

    env:
      VERSION: "@VERSION@"
      ARTIFACT: "libplctag_@VERSION@_ubuntu_${{ matrix.artifact_suffix }}"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"
      BRANCH: ${{ github.head_ref || github.ref_name }}

    steps:
    - name: Print out current branch and architecture
      run: echo "Building branch ${{ env.BRANCH }} for ${{ matrix.arch }}"

    - name: "Checkout library source."
      uses: actions/checkout@v4
      with:
        ref: ${{ env.BRANCH }}

    - name: Setup ARM cross-compilation
      run: |
        set -e  # Exit on any error

        # Add target architecture
        sudo dpkg --add-architecture ${{ matrix.target_arch }}

        # Modify existing sources.list to exclude ARM architectures from main repos
        sudo sed -i 's/^deb /deb [arch=amd64,i386] /' /etc/apt/sources.list
        sudo sed -i 's/^deb-src /deb-src [arch=amd64,i386] /' /etc/apt/sources.list

        # Add ARM ports repository for the target architecture
        cat << EOF | sudo tee /etc/apt/sources.list.d/${{ matrix.target_arch }}.list
        deb [arch=${{ matrix.target_arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse
        deb [arch=${{ matrix.target_arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse
        deb [arch=${{ matrix.target_arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-backports main restricted universe multiverse
        deb [arch=${{ matrix.target_arch }}] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse
        EOF

        # Single apt update after adding repositories
        sudo apt update

        # Install cross-compilation tools and target libraries
        sudo apt install -y \
          build-essential \
          cmake \
          gcc-${{ matrix.gcc_prefix }} \
          g++-${{ matrix.gcc_prefix }} \
          libc6-dev:${{ matrix.target_arch }} \
          libgcc-s1:${{ matrix.target_arch }}

    - name: Verify cross-compilation tools
      run: |
        echo "Verifying installed cross-compilation tools:"
        ${{ matrix.gcc_prefix }}-gcc --version
        ${{ matrix.gcc_prefix }}-g++ --version

    - name: Create build directory
      run: |
        rm -rf ${{ env.BUILD }}
        mkdir -p ${{ env.BUILD }}

    - name: Configure CMake with cross-compilation
      run: |
        cd ${{ env.BUILD }}
        cmake \
          -DCMAKE_BUILD_TYPE=MinSizeRel \
          -DBUILD_MODBUS_EMULATOR:BOOL=Off \
          -DCMAKE_VERBOSE_MAKEFILE=On \
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake_toolchains/${{ matrix.cmake_toolchain_file }} \
          ..

    - name: Build
      run: |
        cd ${{ env.BUILD }}
        cmake --build . --verbose

    - name: Verify build artifacts
      run: |
        echo "Build completed. Checking artifacts in ${{ env.DIST }}:"
        ls -la ${{ env.DIST }} || echo "No artifacts directory found"

    - name: Upload ZIP artifact with only development libs
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_dev
        path: ${{ env.DIST }}/libplctag.*

    - name: Upload ZIP artifact with libs and tools
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_tools
        path: |
          ${{ env.DIST }}/libplctag.*
          ${{ env.DIST }}/ab_server
          ${{ env.DIST }}/list_tags_logix
          ${{ env.DIST }}/list_tags_micro8x0

    - name: Upload ZIP all binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}
        path: ${{ env.DIST }}
        if-no-files-found: error

  debug_context:
    runs-on: ubuntu-22.04
    steps:
    - name: Debug GitHub context
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Ref name: ${{ github.ref_name }}"
        echo "Base ref: ${{ github.base_ref }}"
        echo "Head ref: ${{ github.head_ref }}"
        echo "PR Action: ${{ github.event.action }}"
        echo "PR Number: ${{ github.event.number }}"
        echo "PR Merged: ${{ github.event.pull_request.merged }}"
        echo "PR Title: ${{ github.event.pull_request.title }}"
        echo "PR Body: ${{ github.event.pull_request.body }}"
        echo "Repository: ${{ github.repository }}"
        echo "SHA: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Job: ${{ github.job }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Run Number: ${{ github.run_number }}"
        echo "---"
        echo "Base ref condition: ${{ github.base_ref == 'release' }}"
        echo "Event condition: ${{ github.event_name == 'pull_request' }}"
        echo "Action condition: ${{ github.event.action == 'closed' }}"
        echo "Merged condition: ${{ github.event.pull_request.merged == true }}"
        echo "Push to release condition: ${{ github.event_name == 'push' && github.ref == 'refs/heads/release' }}"
        echo "---"
        echo "Current release condition: ${{ github.base_ref == 'release' && github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}"
        echo "Alternative push condition: ${{ github.event_name == 'push' && github.ref == 'refs/heads/release' }}"
        echo "Combined condition: ${{ (github.base_ref == 'release' && github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) || (github.event_name == 'push' && github.ref == 'refs/heads/release') }}"

  create_release:
    needs: [ubuntu_x64, ubuntu_x86, macos_x64, macos_ARM64, windows_x64_MSVC, windows_x64_MinGW, windows_x86_MSVC, windows_x86_MinGW, windows_cross_build_ARM64_MSVC, ubuntu_arm_cross]
    runs-on: ubuntu-22.04
    if: (github.base_ref == 'release' && github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true) || (github.event_name == 'push' && github.ref == 'refs/heads/release')

    env:
      VERSION: "@VERSION@"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get PR details
      id: get_pr_details
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_BODY="${{ github.event.pull_request.body }}"
        echo "pr_message<<EOF" >> $GITHUB_OUTPUT
        echo "$PR_TITLE" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "$PR_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release_artifacts

    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v@VERSION@" -m "Release v@VERSION@"
        git push origin "v@VERSION@"

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: "v@VERSION@"
        name: ${{ github.event.pull_request.title }}
        body: ${{ steps.get_pr_details.outputs.pr_message }}
        files: ./release_artifacts/**/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
